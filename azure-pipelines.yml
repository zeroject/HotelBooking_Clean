# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main

variables:
  buildConfiguration: 'Release'
  ASPNETCORE_URLS: 'https://+:5001;http://+:5000'
  apiHealthCheckUrl: 'http://localhost:5000/health'

pool:
  name: 'Maple-PC'
  vmImage: 'ubuntu-latest'

steps:
# Build
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    arguments: '--configuration $(buildConfiguration)'
    projects: '**/*.csproj'

# Test
- task: DotNetCoreCLI@2
  displayName: Testing
  inputs:
    command: test
    projects: '**/*Tests/*.csproj'

# Run the web api in background with Powershell
- task: PowerShell@2
  displayName: Run the Web API (Windows)
  condition: eq(variables['Agent.OS'], 'Windows_NT')
  inputs:
    targetType: 'inline'
    script: |
      Start-Process -NoNewWindow dotnet -ArgumentList "$(Build.SourcesDirectory)\HotelBooking.WebApi\bin\$(buildConfiguration)\HotelBooking.WebApi.dll"

# Wait for the Web API to be ready
- task: PowerShell@2
  displayName: 'Wait for API to start'
  inputs:
    targetType: 'inline'
    script: |
      $url = "$(apiHealthCheckUrl)"
      $maxRetries = 20
      $retryCount = 0
      $delay = 5
      
      do {
        try {
          $response = Invoke-WebRequest -Uri $url -UseBasicParsing
          if ($response.StatusCode -eq 200) {
            Write-Host "API is up and running."
            $apiStarted = $true
          } else {
            Write-Host "API is not ready yet. Waiting..."
            Start-Sleep -Seconds $delay
            $retryCount++
          }
        } catch {
          Write-Host "Waiting for API to start. Attempt: $($retryCount + 1)"
          Start-Sleep -Seconds $delay
          $retryCount++
        }
      } until ($apiStarted -or $retryCount -ge $maxRetries)

      if (-not $apiStarted) {
        throw "API failed to start within the expected time."
      }

# Install Newman
- task: Npm@1
  displayName: Install Newman
  inputs:
    command: 'custom'
    customCommand: 'install newman -g'

# Run Postman tests
- task: CmdLine@2
  displayName: Run Postman tests
  inputs:
    script: 'newman run $(Build.SourcesDirectory)/Postman/HotelBooking.postman_collection.json -k -r cli'